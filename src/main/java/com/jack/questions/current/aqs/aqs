https://mp.weixin.qq.com/s/VnhST9UQLay2Zvrq-zu0hA
aqs同步队列
是实现 ReentrantLock、CountDownLatch、Semaphore、FutureTask 等类的基础
https://javadoop.com/post/AbstractQueuedSynchronizer
    // 头结点，你直接把它当做 当前持有锁的线程 可能是最好理解的
    private transient volatile Node head;

    // 阻塞的尾节点，每个新的节点进来，都插入到最后，也就形成了一个链表
    private transient volatile Node tail;

    // 这个是最重要的，代表当前锁的状态，0代表没有被占用，大于 0 代表有线程持有当前锁
    // 这个值可以大于 1，是因为锁可以重入，每次重入都加上 1
    private volatile int state;

    // 代表当前持有独占锁的线程，举个最重要的使用例子，因为锁可以重入
    // reentrantLock.lock()可以嵌套调用多次，所以每次用这个来判断当前线程是否已经拥有了锁
    // if (currentThread == getExclusiveOwnerThread()) {state++}
    private transient Thread exclusiveOwnerThread; //继承自AbstractOwnableSynchronizer

等待队列中每个线程被包装成一个 Node 实例，数据结构是链表
static final class Node {
                // ======== 下面的几个int常量是给waitStatus用的 ===========
                /** waitStatus value to indicate thread has cancelled */
                // 代码此线程取消了争抢这个锁
                static final int CANCELLED =  1;
                /** waitStatus value to indicate successor's thread needs unparking */
                // 官方的描述是，其表示当前node的后继节点对应的线程需要被唤醒
                static final int SIGNAL    = -1;
                // 取值为上面的1、-1、-2、-3，或者0(以后会讲到)
                // 这么理解，暂时只需要知道如果这个值 大于0 代表此线程取消了等待，
                //    ps: 半天抢不到锁，不抢了，ReentrantLock是可以指定timeouot的。。。
                volatile int waitStatus;
                // 前驱节点的引用
                volatile Node prev;
                // 后继节点的引用
                volatile Node next;
                // 这个就是线程本尊
                volatile Thread thread;
        }
Node 的数据结构其实也挺简单的，就是 thread + waitStatus + pre + next 四个属性而已
再次强调，我说的阻塞队列不包含 head 节点。

ReentrantLock 在内部用了内部类 Sync 来管理锁，所以真正的获取锁和释放锁是由 Sync 的实现类来控制的。

abstract static class Sync extends AbstractQueuedSynchronizer {
}
Sync 有两个实现，分别为 NonfairSync（非公平锁）和 FairSync（公平锁）

// 我们看到，这个方法，如果tryAcquire(arg) 返回true, 也就结束了。
// 否则，acquireQueued方法会将线程压到队列中
public final void acquire(int arg) { // 此时 arg == 1
    // 首先调用tryAcquire(1)一下，名字上就知道，这个只是试一试
    // 因为有可能直接就成功了呢，也就不需要进队列排队了，
    // 对于公平锁的语义就是：本来就没人持有锁，根本没必要进队列等待(又是挂起，又是等待被唤醒的)
    if (!tryAcquire(arg) &&
        // tryAcquire(arg)没有成功，这个时候需要把当前线程挂起，放到阻塞队列中。
        acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) {
          selfInterrupt();
    }
}

// 此方法的作用是把线程包装成node，同时进入到队列中
// 参数mode此时是Node.EXCLUSIVE，代表独占模式
private Node addWaiter(Node mode) {
    Node node = new Node(Thread.currentThread(), mode);
    // Try the fast path of enq; backup to full enq on failure
    // 以下几行代码想把当前node加到链表的最后面去，也就是进到阻塞队列的最后
    Node pred = tail;

    // tail!=null => 队列不为空(tail==head的时候，其实队列是空的，不过不管这个吧)
    if (pred != null) {
        // 将当前的队尾节点，设置为自己的前驱
        node.prev = pred;
        // 用CAS把自己设置为队尾, 如果成功后，tail == node 了，这个节点成为阻塞队列新的尾巴
        if (compareAndSetTail(pred, node)) {
            // 进到这里说明设置成功，当前node==tail, 将自己与之前的队尾相连，
            // 上面已经有 node.prev = pred，加上下面这句，也就实现了和之前的尾节点双向连接了
            pred.next = node;
            // 线程入队了，可以返回了
            return node;
        }
    }
    // 仔细看看上面的代码，如果会到这里，
    // 说明 pred==null(队列是空的) 或者 CAS失败(有线程在竞争入队)
    // 读者一定要跟上思路，如果没有跟上，建议先不要往下读了，往回仔细看，否则会浪费时间的
    enq(node);
    return node;
}


// 采用自旋的方式入队
// 之前说过，到这个方法只有两种可能：等待队列为空，或者有线程竞争入队，
// 自旋在这边的语义是：CAS设置tail过程中，竞争一次竞争不到，我就多次竞争，总会排到的
private Node enq(final Node node) {
    for (;;) {
        Node t = tail;
        // 之前说过，队列为空也会进来这里
        if (t == null) { // Must initialize
            // 初始化head节点
            // 细心的读者会知道原来 head 和 tail 初始化的时候都是 null 的
            // 还是一步CAS，你懂的，现在可能是很多线程同时进来呢
            if (compareAndSetHead(new Node()))
                // 给后面用：这个时候head节点的waitStatus==0, 看new Node()构造方法就知道了

                // 这个时候有了head，但是tail还是null，设置一下，
                // 把tail指向head，放心，马上就有线程要来了，到时候tail就要被抢了
                // 注意：这里只是设置了tail=head，这里可没return哦，没有return，没有return
                // 所以，设置完了以后，继续for循环，下次就到下面的else分支了
                tail = head;
        } else {
            // 下面几行，和上一个方法 addWaiter 是一样的，
            // 只是这个套在无限循环里，反正就是将当前线程排到队尾，有线程竞争的话排不上重复排
            node.prev = t;
            if (compareAndSetTail(t, node)) {
                t.next = node;
                return t;
            }
        }
    }
}

// 现在，又回到这段代码了
// if (!tryAcquire(arg)
//        && acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
//     selfInterrupt();

// 下面这个方法，参数node，经过addWaiter(Node.EXCLUSIVE)，此时已经进入阻塞队列
// 注意一下：如果acquireQueued(addWaiter(Node.EXCLUSIVE), arg))返回true的话，
// 意味着上面这段代码将进入selfInterrupt()，所以正常情况下，下面应该返回false
// 这个方法非常重要，应该说真正的线程挂起，然后被唤醒后去获取锁，都在这个方法里了
final boolean acquireQueued(final Node node, int arg) {
    boolean failed = true;
    try {
        boolean interrupted = false;
        for (;;) {
            final Node p = node.predecessor();
            // p == head 说明当前节点虽然进到了阻塞队列，但是是阻塞队列的第一个，因为它的前驱是head
            // 注意，阻塞队列不包含head节点，head一般指的是占有锁的线程，head后面的才称为阻塞队列
            // 所以当前节点可以去试抢一下锁
            // 这里我们说一下，为什么可以去试试：
            // 首先，它是队头，这个是第一个条件，其次，当前的head有可能是刚刚初始化的node，
            // enq(node) 方法里面有提到，head是延时初始化的，而且new Node()的时候没有设置任何线程
            // 也就是说，当前的head不属于任何一个线程，所以作为队头，可以去试一试，
            // tryAcquire已经分析过了, 忘记了请往前看一下，就是简单用CAS试操作一下state
            if (p == head && tryAcquire(arg)) {
                setHead(node);
                p.next = null; // help GC
                failed = false;
                return interrupted;
            }
            // 到这里，说明上面的if分支没有成功，要么当前node本来就不是队头，
            // 要么就是tryAcquire(arg)没有抢赢别人，继续往下看
            if (shouldParkAfterFailedAcquire(p, node) &&
                parkAndCheckInterrupt())
                interrupted = true;
        }
    } finally {
        // 什么时候 failed 会为 true???
        // tryAcquire() 方法抛异常的情况
        if (failed)
            cancelAcquire(node);
    }
}


// 现在，又回到这段代码了
// if (!tryAcquire(arg)
//        && acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
//     selfInterrupt();

// 下面这个方法，参数node，经过addWaiter(Node.EXCLUSIVE)，此时已经进入阻塞队列
// 注意一下：如果acquireQueued(addWaiter(Node.EXCLUSIVE), arg))返回true的话，
// 意味着上面这段代码将进入selfInterrupt()，所以正常情况下，下面应该返回false
// 这个方法非常重要，应该说真正的线程挂起，然后被唤醒后去获取锁，都在这个方法里了
final boolean acquireQueued(final Node node, int arg) {
    boolean failed = true;
    try {
        boolean interrupted = false;
        for (;;) {
            final Node p = node.predecessor();
            // p == head 说明当前节点虽然进到了阻塞队列，但是是阻塞队列的第一个，因为它的前驱是head
            // 注意，阻塞队列不包含head节点，head一般指的是占有锁的线程，head后面的才称为阻塞队列
            // 所以当前节点可以去试抢一下锁
            // 这里我们说一下，为什么可以去试试：
            // 首先，它是队头，这个是第一个条件，其次，当前的head有可能是刚刚初始化的node，
            // enq(node) 方法里面有提到，head是延时初始化的，而且new Node()的时候没有设置任何线程
            // 也就是说，当前的head不属于任何一个线程，所以作为队头，可以去试一试，
            // tryAcquire已经分析过了, 忘记了请往前看一下，就是简单用CAS试操作一下state
            if (p == head && tryAcquire(arg)) {
                setHead(node);
                p.next = null; // help GC
                failed = false;
                return interrupted;
            }
            // 到这里，说明上面的if分支没有成功，要么当前node本来就不是队头，
            // 要么就是tryAcquire(arg)没有抢赢别人，继续往下看
            if (shouldParkAfterFailedAcquire(p, node) &&
                parkAndCheckInterrupt())
                interrupted = true;
        }
    } finally {
        // 什么时候 failed 会为 true???
        // tryAcquire() 方法抛异常的情况
        if (failed)
            cancelAcquire(node);
    }
}



aqs为什么要用双向链表
    在队列同步器中，头节点是成功获取到同步状态的节点，而头节点的线程释放了同步状态后，将会唤醒其他后续节点，
    后继节点的线程被唤醒后需要检查自己的前驱节点是否是头节点，如果是则尝试获取同步状态。
    所以为了能让后继节点获取到其前驱节点，同步队列便设置为双向链表，而等待队列没有这样的需求，就为单链表。

    需要要到一个前驱节点，来唤醒自己
gc的垃圾回收信息存在哪里？为什么是15次。
    因为Object Header采用4个bit位来保存年龄，4个bit位能表示的最大数就是15！
    存在对象头里面啊。而且最大只能是15次，因为对象头那边存储大小为4个字节吧好像，
    然后大于15次后，对象还存在，就会转入老年代中去，，如果最后还存在，就会判断栈里面的栈帧是否移出。而去移出对象
