https://juejin.cn/post/6860252224930070536

statement记录的是执行的sql语句，也就是主库上执行了什么语句，binlog中就记录什么语句。
statement格式的优点：
由于仅记录sql语句，日志记录量较少，可以节约磁盘和网络I/O；
statement格式的缺点：
对于特定的函数，比如UUID()，user()这些非确定性函数，在主备服务器上的执行结果不同，可能造成主备数据不一致；
生产环境中一般不使用。

row记录的是每一行记录的增/删/改操作，若一条sql语句修改了1000条记录，row格式的日志将会分别记录1000条记录的修改，而statement仅记录一条sql语句。
row格式的优点：
主从复制安全，可以保证主备服务器数据完全一致；
若误操作修改了数据，同时没有备份恢复，可以通过分析二进制日志，通过对记录做反向操作，达到恢复数据的目的；


二进制日志（Binary Log）：
    特点：
        二进制日志记录了对数据库的所有修改操作，包括插入、更新和删除等。它以二进制格式存储，可以用于数据复制、灾难恢复和增量备份。
    使用场景：
        数据复制：二进制日志用于在主从复制中传输和应用数据库的更改。
        灾难恢复：通过回放二进制日志可以还原到特定的时间点或恢复损坏的数据库。
        增量备份：二进制日志可以用于增量备份数据库，只备份自上次备份以来的更改。

事务日志（Redo Log）：
    特点：
        事务日志也称为重做日志，它记录了正在进行的事务的修改操作，以确保数据的一致性和持久性。事务日志以循环写的方式记录在磁盘上，以提高性能。
    使用场景：
        数据库恢复：通过重做日志可以还原到最近的提交点，以确保事务的持久性和数据库的一致性。
        崩溃恢复：在数据库崩溃后，通过重做日志可以将未提交的事务回滚，并将已提交的事务应用到数据库中。

Undo日志是MySQL中的一种日志，用于实现事务的回滚和MVCC（多版本并发控制）的功能。具体来说，Undo日志记录了事务执行过程中对数据进行的修改操作，以便在事务回滚或MVCC读取时提供旧版本的数据。
下面是Undo日志的一些关键特点和作用：
    回滚：当事务需要回滚时，Undo日志中记录的操作可以用于还原事务执行前的数据状态。通过撤销（undo）Undo日志中的操作，可以将数据恢复到事务开始之前的状态。
    MVCC：MySQL中的MVCC机制使用Undo日志来实现并发控制。在并发读取数据时，读取操作会根据事务的启动时间和版本号来判断可见性。通过读取Undo日志中的旧版本数据，可以提供读取一致性的视图。
    版本链：Undo日志以链表的形式组织，每个事务修改的数据都有一个对应的Undo日志记录。多个Undo日志记录形成一个版本链，用于维护不同事务的数据修改历史。
    数据恢复：除了回滚事务外，Undo日志还可用于数据恢复。在数据库崩溃或意外中断后，通过重做Undo日志中的操作，可以将未提交的事务回滚并恢复已提交的事务。
    总的来说，Undo日志在MySQL中起着重要的作用，它为事务的回滚和并发控制提供了基础支持。通过记录和管理数据修改的历史，Undo日志使得数据库能够维护数据的一致性和并发读取的正确性。



简要描述：
    Statement格式：
        优点：以SQL语句的形式记录操作，日志较为紧凑，节省存储空间。适用于操作较简单的数据库，如批量插入数据、大量更新操作等。
        缺点：在某些情况下，同一SQL语句在主库和从库上的执行结果可能不一致，导致复制不一致。例如，随机函数、时间函数等可能会产生不同的结果。
        使用场景：适用于没有涉及到上述潜在问题的简单操作，并且主从数据库的配置保持一致的情况。
    Row格式：
        优点：以行的形式记录操作，可以确保主库和从库的数据完全一致。适用于复杂的操作，如更新和删除操作，包括涉及触发器、存储过程等复杂逻辑的操作。
        缺点：日志量较大，占用更多的存储空间。因为记录了每一行数据的变化，对于大量的单行操作，日志可能会变得非常大。
        使用场景：适用于对数据一致性要求高的复杂操作，特别是包含触发器、存储过程等复杂逻辑的操作。
    Mixed格式：
        优点：结合了Statement格式和Row格式的优点。在简单的操作上使用Statement格式，在复杂的操作上使用Row格式。这样可以同时享受到节省存储空间和数据一致性的好处。
        缺点：需要根据具体的操作类型进行判断和选择，管理和配置略微复杂。
        使用场景：适用于既有简单操作又有复杂操作的数据库，能够兼顾存储空间和数据一致性的需求。


