https://www.cnblogs.com/dqiii/archive/2020/06/30/13214781.html
https://www.cnblogs.com/JackPn/p/9386182.html
二、创建对象
1、在堆区分配对象需要的内存
    分配的内存包括本类和父类的所有实例变量，但不包括任何静态变量。
2.对所有实例变量赋默认值
    将方法区内对实例变量的定义拷贝一份到堆区，然后赋默认值
3.执行实例初始化代码
    初始化顺序是先初始化父类在初始化子类，初始化时先执行实例代码然后是构造方法
4.如果有类似于Child c = new Child()形式的c引用的话，在栈区定义Child类型引用变量c，然后将堆区对象的地址赋值给它
    需要注意的是，每个子类对象持有父类对象的引用，可在内部通过super关键字来调用父类对象，但在外部不可访问。
通过实例引用调用实例方法的时候，先从方法区中对象的实际类型信息找，找不到的话再去父类类型信息中找。
如果继承的层次比较深，要调用的方法位于比较上层的父类，则调用的效率是比较低的，因为每次调用都要经过很多次差找。这时候大多系统会采用一种称为虚方法表的方法来优化调用的效率。
所谓虚方法表，就是在类加载的时候，为每个类创建一个表，这个表包括该类的对象所有的动态绑定的方法及其地址，包括父类的方法，但一个方法只有一条记录，子类重写了父类方法后只会保留子类的，当通过对象动态绑定方法的时候，只需要差找这个表就可以了，而不需要挨个查找每个父类。


类变量：独立于方法之外的变量，用 static 修饰。
实例变量：独立于方法之外的变量，不过没有 static 修饰。
局部变量：类的方法中的变量

​2）创建对象​
   （1）、​在堆区分配对象所需要的内存​：分配内存包括本类和父类，但是不包括静态变量，第一步已经说明了
   （2）、​对所有实例变量进行默认赋值：​将方法区对于的实例变量的定义拷贝一份到堆区，然后进行赋值
   （3）、​执行初始化代码​：先初始化父类然后再初始化子类，初始化之前先执行块代码然后才是构造方法



https://blog.csdn.net/q160336802/article/details/123054729
java创建对象的过程主要分为一下五个步骤：
（1）类加载检查
Java虚拟机（jvm）在读取一条new指令时候，首先检查能否在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否被加载、解析和初始化。如果没有，则会先执行相应的类加载过程。

（2）内存分配
在通过（1）后，则开始为新生的对象分配内存。该对象所需的内存大小在类加载完成后便可确定，因此为每个对象分配的内存大小是确定的。而分配方式主要有两种，分别为：

1.指针碰撞

应用场合：堆内存规整（通俗的说就是用过的内存被整齐充分的利用，用过的内存放在一边，没有用过的放在另外一边，而中间利用一个分界值指针对这两边的内存进行分界，从而掌握内存分配情况）。

即在开辟内存空间时候，将分界值指针往没用过的内存方向移动向应大小位置即可）。

将堆内存这样划分的代表的GC收集器算法有：Serial，ParNew

2.空闲列表

应用场合;堆内存不规整（虚拟机维护一个可以记录内存块是否可以用的列表来了解内存分配情况）

即在开辟内存空间时候，找到一块足够大的内存块分配给该对象即可，同时更新记录列表。

将堆内存这样划分的代表的GC收集器算法有：CMS

（3）初始化默认值
第（2）步完成后，紧接着，虚拟机需要将分配到的内存空间都进行初始化（即给一些默认值），这将做是为了保证对象实例的字段在Java代码中可以在不赋初值的情况下使用。程序可以访问到这些字段对用数据类型的默认值。

（4）设置对象头
初始化（3）完成后，虚拟机对对象进行一些简单设置，如标记该对象是哪个类的实例，这个对象的hash码，该对象所处的年龄段等等（这些可以理解为对象实例的基本信息）。这些信息被写在对象头中。jvm根据当前的运行状态，会给出不同的设置方式。

（5）执行初始化方法
在（4）完成后，最后执行由开发人员编写的对象的初始化方法，把对象按照开发人员的设计进行初始化，一个对象便创建出来了


C:总结来说，通过 new 关键字创建一个对象的过程包括内存分配、初始化零值、执行构造函数和返回对象引用。这个过程由Java虚拟机负责，并提供了对象的初始化和内存管理机制。

gpt:
1.分配内存空间： 当使用new关键字创建一个对象时，Java虚拟机（JVM）首先会在堆内存中分配一块足够大的内存空间来存储对象的实例变量。这个内存空间的大小取决于对象的类型和实例变量的数量。
2.初始化实例变量： 一旦内存空间被分配，JVM会对对象的实例变量进行初始化。这意味着将实例变量设置为默认值，比如数值类型为0，布尔类型为false，对象类型为null等等。
3.调用构造方法： 在内存空间被分配并且实例变量被初始化之后，JVM会调用对象的构造方法（Constructor）来完成对象的初始化过程。
    构造方法是一个特殊的方法，用于在对象创建时执行必要的初始化操作。开发人员可以在类中定义一个或多个构造方法，用于满足不同的对象初始化需求。
4.返回对象引用： 当对象的内存空间被成功初始化并且构造方法执行完毕后，new表达式将返回一个指向新创建对象的引用。这个引用可以被赋值给一个变量，或者直接被使用。
