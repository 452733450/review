三色标记法（Three-Color Marking Algorithm）是一种用于实现垃圾回收的标记-清除算法。它是并发垃圾回收算法中常用的一种技术，通常与写屏障等技术结合使用。

三色标记法的核心思想是将对象分为三种状态：白色、灰色和黑色。

白色（White）：表示对象尚未被扫描过，即垃圾回收器还未处理的对象。
灰色（Gray）：表示对象已经被扫描到，但其引用的其他对象尚未被扫描。换句话说，灰色对象的引用仍然需要进一步探索。
黑色（Black）：表示对象及其引用的其他对象都已经被完全扫描过，即已知是存活对象。
基于这种分类，三色标记法通过以下步骤执行垃圾回收：

初始标记（Initial Marking）：从根对象开始，标记所有直接可达的对象为灰色。这个阶段的目的是标记出一部分直接可达的对象，以避免在并发标记过程中遗漏。
并发标记（Concurrent Marking）：在这个阶段，垃圾回收器并发地遍历所有灰色对象的引用，将其引用的对象标记为灰色，并将自己标记为黑色。此时，其他线程可能在程序中修改对象引用，因此需要保证并发标记的正确性。
重新标记（Remark）：在并发标记结束后，进行一次暂停，重新标记所有被修改过引用的对象。这样可以确保没有遗漏标记任何可达对象。
清除（Sweeping）：标记为白色的对象即为垃圾对象，将其进行清除，释放内存空间。
三色标记法通过区分对象的不同状态，实现了高效且低停顿的垃圾回收。它的主要优点在于允许并发标记对象，减少了垃圾回收对程序执行的影响。然而，需要注意的是，在并发标记的过程中，需要处理对象引用的变化，确保标记的正确性。


写屏障
写屏障（Write Barrier）是一种用于并发垃圾回收的技术，用于在对象引用发生变化时，通知垃圾回收器进行相应的处理。写屏障通常与三色标记法等算法结合使用，用于保证并发标记的正确性。
写屏障（Write Barrier）是一种关键的技术，用于确保并发标记的正确性和完整性
捕获引用变化：
    当程序执行中的代码修改了对象的引用时，写屏障能够捕获到这种变化。这样，即使在并发标记的过程中，垃圾回收器也能够感知到对象引用的变化。
更新标记状态：
    写屏障在捕获到引用变化后，可以根据需要更新对象的标记状态。例如，如果一个对象的引用从白色对象指向灰色对象，那么该对象可能也应该被标记为灰色，以便在后续的标记过程中被正确处理。

写屏障是一种在对象引用被修改时，将其新的引用信息记录在特殊数据结构中的机制。在三色标记法中，写屏障技术被用于记录对象的标记状态，并且只对未被标记过的对象进行标记。
当应用程序线程修改了一个对象的引用时，写屏障会记录该对象新的标记状态。如果该对象未被标记过，那么它会被标记为灰色，以便在垃圾回收器的下一次遍历中进行标记。如果该对象已经被标记为可达对象(灰色或黑色)，那么写屏障不会进行任何操作。