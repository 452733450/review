队列下单：
	加锁：key是用户id，用户维度
    综合风控校验
	开始队列下单
		获取秒杀品缓存
			先从本地获取，本地获取到了，（获取不到从远程获取）
				比较version，如果请求带过来的version>缓存查出来的当前version
				说明本地缓存已经过期，需要从远程缓存获取最新的缓存
			校验秒杀品是否存在
			秒杀稍后再试
			更新秒杀品最新库存
				获取库存缓存
					先从本地获取
					本地没有的话，从远程获取，获取到了放入本地缓存
					读取远程缓存
						尝试更新秒杀品缓存
							加分布式锁，key为秒杀品id
								加锁不成功则返回稍后再试
								加锁成功，获取缓存
								获取到了，则返回，
								获取不到，从数据库获取
									获取不到则返回noExist
									获取成功设置一个version System.currentTimeMillis()
									存入缓存
		校验是否非在售时间
		生成任务id:用户id，秒杀品id组合之后md5加密
		提交下单任务
			获取taskKey缓存(taskId缓存)，校验是否重复下单(幂等)
			获取可用下单token
				先从redis获取，获取不到则去刷新本地可用token
					// 先从本地缓存获取（秒杀品id为key）
					// 本地没有从远程缓存去拿
							远程如果拿到了，放入本地缓存
					// 远程缓存也没有，则刷新
							加锁，防止并发更新
							获取秒杀品库存，库存的1.5倍作为值存入缓存
			如果可用下单token不存在，或为0，返回暂无可用库存
			执行LUA脚本，库存扣减
				3次for循环扣减
					key不存在，直接返回扣减失败
					没有扣减成功，刷新可用下单token，再来一次扣减
			投递下单任务
				发送消息到RocketMQ(topic为PLACE_ORDER_TASK_TOPIC)
			下单任务提交失败，要恢复token
			把taskId作为key存入缓存；


处理下单消息
	RocketMQOrderTaskConsumerService.onMessage()
		秒杀活动规则校验
			是否存在
			是否上线
			是否在秒杀时段
		秒杀品下单规则校验
		根据秒杀品id从数据库获取秒杀品
		生成订单id(雪花算法)
		数据库扣减库存
		下单
			订单状态为创建
			保存订单
			保存成功，发布领域事件，一般基于独立的消息中间件系统发布
		更新任务状态（更新redis中的taskId）
		订单id存入redis
		如果处理消息发生异常，更新任务id为-1

任务结果轮询
	校验下单任务编号是否错误
	校验任务是否成功
	返回订单id
