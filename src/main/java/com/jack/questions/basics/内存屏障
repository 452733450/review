内存屏障的两个能力

1. 阻止屏障两边的指令重排序

2. 刷新处理器缓存/冲刷处理器缓存

对Load Barrier来说，在读指令前插入读屏障，可以让高速缓存中的数据失效，重新从主内存加载数据；

对Store Barrier来说，在写指令之后插入写屏障，能让写入缓存的最新数据写回到主内存。


也就是说volatile即可以保证线程的可见性，又可以保证有序性，因为加了volatile，c++底层会实现对应的lock前缀指令，
而lock指令不仅会使改变的值立即刷新回主内存，执行mesi协议。还会使lock前后的代码不进行重排序。

Lock前缀，Lock不是一种内存屏障，但是它能完成类似内存屏障的功能。
Lock会对CPU总线和高速缓存加锁，可以理解为CPU指令级的一种锁。
它后面可以跟ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG等指令。
