https://blog.csdn.net/weixin_53651170/article/details/129488807

在多线程情况下，同时进行扩容操作时，当一个线程在特定位置挂起，其他线程执行完扩容操作，
使用头插法导致链表顺序翻转后,挂起的线程重新开始执行，由于局部变量存储的是旧数据，导致后续循环的时候指针指向的都是对方，形成环形链表，并在后续操作hashmap时造成死循环

在jdk1.8中对HashMap进行了优化，在发生hash碰撞，不再采用头插法方式，而是直接插入链表尾部，因此不会出现环形链表的情况，但是在多线程的情况下仍然是不安全

1.7还存在数据丢失，1.8数据覆盖的情况，这些问题如何发生的后续有空再解释


https://blog.csdn.net/weixin_51743274/article/details/126757456?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-126757456-blog-129488807.235%5Ev43%5Epc_blog_bottom_relevance_base5&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-126757456-blog-129488807.235%5Ev43%5Epc_blog_bottom_relevance_base5&utm_relevant_index=2
多线程扩容时，一个线程拿到一个节点的值，然后被挂起，另外一个线程已经完成了链表的翻转，
