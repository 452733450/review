如何理解select、poll、epoll
https://www.yuque.com/hollis666/ca2plb/vlsvn2xykt68fdg3

https://www.yuque.com/hollis666/ca2plb/vlsvn2xykt68fdg3

以下是 epoll 的一些关键特点：

可伸缩性：

epoll 允许管理大量文件描述符，随着文件描述符数量的增加，性能不会线性下降。这使得 epoll 更适合用于高并发的网络应用。
事件驱动：

epoll 是事件驱动的，它会通知应用程序哪些文件描述符已经准备好进行读或写操作，而不是应用程序轮询所有的文件描述符。
这避免了轮询的开销，使得 I/O 事件的处理更为高效。
三个系统调用：

epoll 主要涉及三个系统调用：
epoll_create：创建一个 epoll 实例，返回一个文件描述符。
epoll_ctl：用于向 epoll 实例中添加、修改或删除文件描述符的事件。
epoll_wait：阻塞等待文件描述符上的事件发生，一旦有事件发生，立即返回发生事件的文件描述符列表。
水平触发和边缘触发：

epoll 可以以水平触发（LT，Level-Triggered）或边缘触发（ET，Edge-Triggered）的方式工作。
在水平触发模式下，只要文件描述符上有事件，epoll_wait 就会返回；
在边缘触发模式下，只有在事件状态发生变化时才会返回，需要用户程序自行处理。
支持多种事件类型：

epoll 支持多种事件类型，包括可读、可写、错误等，以及对于带外数据的处理。这使得 epoll 在处理不同类型事件时更加灵活。
epoll 的引入是为了解决传统的 select 和 poll 在大规模连接时性能退化的问题。epoll 在内部采用了红黑树的数据结构，能够高效地管理大量的文件描述符。在实现高并发网络应用时，epoll 是一个常用的选择，能够提高系统的性能和可伸缩性。