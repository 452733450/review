如何理解
https://www.yuque.com/hollis666/ca2plb/vlsvn2xykt68fdg3

https://www.yuque.com/hollis666/ca2plb/vlsvn2xykt68fdg3

以下是 epoll 的一些关键特点：

可伸缩性：

epoll 允许管理大量文件描述符，随着文件描述符数量的增加，性能不会线性下降。这使得 epoll 更适合用于高并发的网络应用。
事件驱动：

epoll 是事件驱动的，它会通知应用程序哪些文件描述符已经准备好进行读或写操作，而不是应用程序轮询所有的文件描述符。
这避免了轮询的开销，使得 I/O 事件的处理更为高效。
三个系统调用：

epoll 主要涉及三个系统调用：
epoll_create：创建一个 epoll 实例，返回一个文件描述符。
epoll_ctl：用于向 epoll 实例中添加、修改或删除文件描述符的事件。
epoll_wait：阻塞等待文件描述符上的事件发生，一旦有事件发生，立即返回发生事件的文件描述符列表。
水平触发和边缘触发：

epoll 可以以水平触发（LT，Level-Triggered）或边缘触发（ET，Edge-Triggered）的方式工作。
在水平触发模式下，只要文件描述符上有事件，epoll_wait 就会返回；
在边缘触发模式下，只有在事件状态发生变化时才会返回，需要用户程序自行处理。
支持多种事件类型：


epoll 支持多种事件类型，包括可读、可写、错误等，以及对于带外数据的处理。这使得 epoll 在处理不同类型事件时更加灵活。
epoll 的引入是为了解决传统的 select 和 poll 在大规模连接时性能退化的问题。epoll 在内部采用了红黑树的数据结构，能够高效地管理大量的文件描述符。在实现高并发网络应用时，epoll 是一个常用的选择，能够提高系统的性能和可伸缩性。

gpt
  epoll 的特点：
      高效性： epoll 使用了事件就绪通知的方式，避免了每次调用都需要将文件描述符集合从用户态拷贝到内核态的开销，因此在处理大量并发连接时性能更高。
      可扩展性： epoll 的性能随着文件描述符的增加而线性增长，适用于高并发的网络编程场景。
      支持边缘触发和水平触发： epoll 支持两种工作模式，一种是边缘触发（Edge Triggered，ET），另一种是水平触发（Level Triggered，LT）。在边缘触发模式下，只有当状态发生变化时才会通知应用程序，而在水平触发模式下，只要状态仍然是就绪状态，就会持续通知应用程序。
      支持多种事件类型： epoll 不仅支持读、写事件的通知，还支持异常事件的通知，以及对于监听套接字的连接请求事件的通知。

  epoll 使用方法：
      创建 epoll 实例： 使用 epoll_create 函数创建一个 epoll 实例，返回一个文件描述符，用于后续的 epoll 操作。
      注册文件描述符： 使用 epoll_ctl 函数将需要监视的文件描述符注册到 epoll 实例中，同时指定所关注的事件类型。
      等待事件发生： 使用 epoll_wait 函数等待事件的发生，一旦有文件描述符就绪，就会返回就绪的文件描述符列表，应用程序可以进行相应的 I/O 操作。
      处理事件： 根据返回的就绪文件描述符列表，进行相应的 I/O 操作，例如读取数据、写入数据等。

  epoll 工作原理：
    epoll 是通过内核事件表来管理和监视文件描述符的状态的。当文件描述符就绪时，内核会将就绪的文件描述符添加到内核事件表中，并通知应用程序进行相应的处理。
    应用程序在调用 epoll_wait 函数时，会阻塞在内核态，直到有文件描述符就绪或者超时，此时内核会将就绪的文件描述符列表返回给应用程序，应用程序可以根据返回的列表进行相应的操作。