https://blog.csdn.net/wang258533488/article/details/79352378
quorum规定（法定人数）数量的哨兵认为master宕机了，就可以从slave中选举出一个slave执行故障转移
majority 大多数的哨兵还运行着，就可以允许执行故障转移

redis 哨兵主备切换的数据丢失问题
    两种情况和导致数据丢失
    主备切换的过程，可能会导致数据丢失：

    异步复制导致的数据丢失
        因为 master->slave 的复制是异步的，所以可能有部分数据还没复制到 slave，master 就宕机了，此时这部分数据就丢失了。
    脑裂导致的数据丢失
        脑裂，也就是说，某个 master 所在机器突然脱离了正常的网络，跟其他 slave 机器不能连接，但是实际上 master 还运行着。
        此时哨兵可能就会认为 master 宕机了，然后开启选举，将其他 slave 切换成了 master。
        这个时候，集群里就会有两个 master ，也就是所谓的脑裂。

        此时虽然某个 slave 被切换成了 master，但是可能 client 还没来得及切换到新的 master，还继续向旧 master 写数据。
        因此旧 master 再次恢复的时候，会被作为一个 slave 挂到新的 master 上去，自己的数据会清空，重新从新的 master 复制数据。
        而新的 master 并没有后来 client 写入的数据，因此，这部分数据也就丢失了。

数据丢失问题的解决方案
进行如下配置：
    min-slaves-to-write 1
    min-slaves-max-lag 10
    表示，要求至少有 1 个 slave，数据复制和同步的延迟不能超过 10 秒。
    如果说一旦所有的 slave，数据复制和同步的延迟都超过了 10 秒钟，那么这个时候，master 就不会再接收任何请求了。

减少异步复制数据的丢失
    有了 min-slaves-max-lag 这个配置，就可以确保说，一旦 slave 复制数据和 ack 延时太长，
    就认为可能 master 宕机后损失的数据太多了，那么就拒绝写请求，
    这样可以把 master 宕机时由于部分数据未同步到 slave 导致的数据丢失降低的可控范围内。

减少脑裂的数据丢失
    如果一个 master 出现了脑裂，跟其他 slave 丢了连接，那么上面两个配置可以确保说，如果不能继续给指定数量的 slave 发送数据，
    而且 slave 超过 10 秒没有给自己 ack 消息，那么就直接拒绝客户端的写请求。因此在脑裂场景下，最多就丢失 10 秒的数据。

sdown 和 odown 转换机制
    sdown 是主观宕机，就一个哨兵如果自己觉得一个 master 宕机了，那么就是主观宕机
    odown 是客观宕机，如果 quorum 数量的哨兵都觉得一个 master 宕机了，那么就是客观宕机
    sdown 达成的条件很简单，如果一个哨兵 ping 一个 master，超过了 is-master-down-after-milliseconds 指定的毫秒数之后，就主观认为 master 宕机了；
    如果一个哨兵在指定时间内，收到了 quorum 数量的其它哨兵也认为那个 master 是 sdown 的，那么就认为是 odown 了。