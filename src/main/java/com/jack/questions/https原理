https://segmentfault.com/a/1190000018992153
https原理

客户端发送请求给服务器，服务器返回证书链，公钥(这个公钥是跟服务器存的私钥是一对的)，签名
这个签名是CA 使用它自己的私钥进行加密的,要找到根证书的公钥来验证签名，证明证书是有效的

然后把数据对称加密后再用服务器的公钥加密，然后服务器用私钥解密，得到明文

SSL 安全套接层 Secure Socket Layer
    SSL（Secure Socket Layer）安全套接层是Netscape公司率先采用的网络安全协议。
    它是在传输通信协议（TCP/IP）上实现的一种安全协议，采用公开密钥技术。
    SSL广泛支持各种类型的网络，同时提供三种基本的安全服务，它们都使用公开密钥技术。

一、什么是HTTPS
HTTPS是在HTTP上建立SSL加密层，并对传输数据进行加密，是HTTP协议的安全版。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。
HTTPS主要作用是：
（1）对数据进行加密，并建立一个信息安全通道，来保证传输过程中的数据安全;
（2）对网站服务器进行真实身份认证。

二、为什么需要HTTPS
HTTP协议存在的哪些问题：
    通信使用明文（不加密），内容可能被窃听
    无法证明报文的完整性，所以可能遭篡改
    不验证通信方的身份，因此有可能遭遇伪装

反观HTTPS协议，它比HTTP协议相比多了以下优势（下文会详细介绍）:
    数据隐私性：内容经过对称加密，每个连接生成一个唯一的加密密钥
    数据完整性：内容传输经过完整性校验
    身份认证：第三方无法伪造服务端（客户端）身份

三、HTTPS如何解决HTTP上述问题?
HTTPS并非是应用层的一种新协议。只是HTTP通信接口部分用SSL和TLS协议代替而已。
通常，HTTP直接和TCP通信。当使用SSL时，则演变成先和SSL通信，再由SSL和TCP通信了。
简言之，所谓HTTPS，其实就是身披SSL协议这层外壳的HTTP。

所谓HTTPS，其实就是身披SSL协议这层外壳的HTTP。
在采用SSL后，HTTP就拥有了HTTPS的加密、证书和完整性保护这些功能。也就是说HTTP加上加密处理和认证以及完整性保护后即是HTTPS。

安全传输层协议（TLS）用于在两个通信应用程序之间提供保密性和数据完整性。
该协议由两层组成： TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）。
Transport Layer Security
传输层安全性协议（英语：Transport Layer Security，缩写作TLS），及其前身安全套接层（Secure Sockets Layer，缩写作SSL）是一种安全协议

证书申请
 Certificate Signing Request
拿着申请信息用open ssl这个软件去CA后台填写一个表单
返回一个csr文件和私钥
csr文件填写的域名的基本信息，包含公钥和签名
签名是申请信息 sha256 散列得到 hash 值，hash之后，用私钥加密生成的
签名是防止你的 CSR 文件在发给 CA 的过程中被中间人拦截，然后修改了里面的信息再发给 CA。

CA 的校验过程是：利用里面的公钥将签名进行解密得到里面的散列值，然后 CA 也会利用 CSR 里面的信息计算一遍散列值，
如果两者相等，那么说明证书没有被中间人修改过，反之就是被修改过。

因为这个签名只能用公钥来解密
如果同时改了加签的内容，和签名，用公钥解密出来，也不会和之前的内容一样
(公钥验签)

证书中主要包含：
    证书颁发机构：用于寻找链中的下一个验证节点
    证书的有效期：比如浏览器要根据这个值来判断证书是否已过期
    证书申请信息：比如浏览器要判断改证书是否可用于当前访问的域名
    公钥：用于后续和服务端通信的秘钥，这个公钥和当初生成 CSR 时的公钥是一个东西，因为只有它是和服务器的私钥是一对的
    签名：用于验证证书内容没有被篡改

要验证证书的合法性
那对于用户浏览器来说，在收到这个证书以后，怎么校验这个证书的签名呢？显然浏览器需要得到 CA 的公钥
用公钥来解密签名，然后就能判断证书是否合法
但是这个证书是由中间证书发的，所以还先要证明中间证书的合法性，一步步往上找，找到根证书
最终用根证书的公钥来验签，证明中间证书的合法性，继而证明了证书的合法性

我们思考一下：
    这个系统要工作好，关键就是最终一定要走到本地根证书库，一环验证一环，实现整个链路证书的可信任；
    中间证书有多少层都可以，只要能一直传递到根证书就行；
    本地的根证书是由操作系统内置的，如果你的使用场景中，根证书不在系统预装里面，需要手动导入根证书

证明了证书的合法性之后，就证明了公钥也是合法的
客户端随机生成一个随机对称密钥，然后用这个公钥加密，然后服务端，用申请CA证书时的私钥来解密，得到对称密钥
5.Server使用自己的私钥（private key）解密这个消息，得到对称密钥。至此，Client和Server双方都持有了相同的对称密钥。
6.Server使用对称密钥加密“明文内容A”，发送给Client。
7.Client使用对称密钥解密响应的密文，得到“明文内容A”。
8.Client再次发起HTTPS的请求，使用对称密钥加密请求的“明文内容B”，然后Server使用对称密钥解密密文，得到“明文内容B”。

