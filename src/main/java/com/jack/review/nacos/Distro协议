Distro协议是什么？
    Distro 协议是 Nacos 社区自研的一种 AP 分布式协议，是面向临时实例设计的一种分布式协议，其保证了在某些 Nacos 节点宕机后，整个临时实例处理系统依旧可以正常工作。
Distro协议的设计思想
    Nacos 每个节点是平等的都可以处理写请求，同时把新数据同步到其他节点。
    每个节点只负责部分数据，定时发送自己负责数据的校验值到其他节点来保持数据一致性。
    每个节点独立处理读请求，及时从本地发出响应

数据初始化
    新加入的 Distro 节点会进行全量数据拉取。具体操作是轮询所有的 Distro 节点，通过向其他的机器发送请求拉取全量数据。

Distro 协议是 Nacos 对于临时实例数据开发的一致性协议。其数据存储在缓存中，并且会在启动时进行全量数据同步，并定期进行数据校验。
    在 Distro 协议的设计思想下，每个 Distro 节点都可以接收到读写请求。所有的 Distro 协议的请求场景主要分为三种情况：
    1、当该节点接收到属于该节点负责的实例的写请求时，直接写入。
    2、当该节点接收到不属于该节点负责的实例的写请求时，将在集群内部路由，转发给对应的节点，从而完成读写。
    3、当该节点接收到任何读请求时，都直接在本机查询并返回（因为所有实例都被同步到了每台机器上）。
Distro 协议作为 Nacos 的内嵌临时实例一致性协议，保证了在分布式环境下每个节点上面的服务信息的状态都能够及时地通知其他节点，可以维持数十万量级服务实例的存储和一致性。


Distro协议工作原理：
    1.数据初始化，新加入的Distro节点会进行全量数据拉取。具体操作是轮询所有的Distro节点，通过向其他的机器发送请求拉取全量数据。在全量拉取操作完成之后，Nacos的每台机器上都维护了当前的所有注册上来的非持久化实例数据。
    2.数据校验，在Distro集群启动之后，各台机器之间会定期的发送心跳进行数据校验。如果某台机器校验发现与其他机器数据不一致，则会进行全量拉去请求将数据补齐。
    3.写操作，当注册非持久化的实例的写请求打到某台Nacos服务器时，首先被Filter拦截，根据请求的IP端口信息转发到对应的Distro责任节点上处理请求。Distro协议还会定期执行Sync任务，将本机所负责的所有的实例信息同步到其他节点上。
    4.读操作，由于每台机器上都存放了全量数据，因此在每⼀次读操作中，Distro机器会直接从本地拉取数据，快速响应。

Distro 的设计机制：
    平等机制：Nacos 的每个节点是平等的，都可以处理写的请求。(上一讲已经重点讲解了✅)
    异步复制机制：Nacos 把变更的数据异步复制到其他节点。(⭐️重点讲解)
    健康检查机制：每个节点只存了部分数据，定期检查客户端状态保持数据一致性。
    本地读机制： 每个节点独立处理读请求，及时从本地发出响应。
    新节点同步机制：Nacos 启动时，从其他节点同步数据。
    路由转发机制：客户端发送的写请求，如果属于自己则处理，否则路由转发给其他节点。(上一讲已经重点讲解了✅)

AP模式基于Distro协议（向任务阻塞队列添加一个本地服务实例改变任务，去更新本地服务列表，
    然后在遍历集群中所有节点，分别创建数据同步任务放进阻塞队列异步进行集群数据同步，不保证集群节点数据同步完成即可返回）

核心步骤：
    遍历其他节点，创建一个同步的任务，加到 map 中。
    后台线程不断从 map 中拿到 task，然后移除这个 task。
    把这个 task 加到一个队列里面。
    有个 worker 专门从队列里面拿到 task 来执行。


3.1 为什么需要定时同步
在 Nacos 集群模式下，它作为一个完整的注册中心，必须具有高可用特性。
在集群模式下，客户端只需要和其中一个 Nacos 节点通信就可以了，但是每个节点其实是包含所有客户端信息的，这样做的好处是每个 Nacos 节点只需要负责自己的客户端就可以(分摊压力)，而当客户端想要拉取全量注册表到本地时，从任意节点都可以读取到(数据一致性)。
那么 Nacos 集群之间是如何通过 Distro 协议来保持数据一致性的呢?

3.2 定期检验元数据
在版本 v1 中 ，采用的是定期检验元信息的方式。元信息就是当前节点包含的客户端信息的 md5 值。
Nacos 各个节点会有一个心跳任务，定期向其他机器发送一次数据检验请求，在校验的过程中，
    当某个节点发现其他机器上的数据的元信息和本地数据的元信息不一致，则会发起一次全量拉取请求，将数据补齐。

四、新节点同步机制，如何保持数据一致性
4.1 原理
    新加入的 Distro 节点会进行全量数据拉取，轮询所有的 Distro 节点，向其他节点发送请求拉取全量数据。

    在全量拉取操作完成之后，每台机器上都维护了当前的所有注册上来的非持久化实例数据。

五、本地读机制
    5.1 原理
    每个 Nacos 节点虽然只负责属于自己的客户端，但是每个节点都是包含有所有的客户端信息的，所以当客户端想要查询注册信息时，可以直接从请求的 Nacos 的节点拿到全量数据。

    读操作的原理
    这样设计的好处是保证了高可用(AP)，分为两个方面：
    ① 读操作都能进行及时的响应，不需要到其他节点拿数据。
    ② 当脑裂发生时，Nacos 的节点也能正常返回数据，即使数据可能不一致，当网络恢复时，通过健康检查机制或数据检验也能达到数据一致性。