package com.jack.review.test.DesignPatterns;

/**
 * @Description:
 * @Auther: Jack You
 * @Date: 2021/05/27/9:19
 */
public class information {
    // https://www.cnblogs.com/xuwendong/p/10078571.html
    /*桥接模式
    重点强调的是多维度的变化。（主体类直接依赖抽象）
    最终的效果就是，主体类的实现类和抽象的实现类分别可以在两个维度上进行各自的变化。
    如果主体类依赖多个抽象，则维度进行增加，方便扩展。

    装饰器模式
    重点强调的是装饰功能。（主体类不仅依赖抽象，而且实现该抽象接口）
    最终的效果就是，（装饰器实现类）对（原抽象的子类）进行某些方法的功能加强。
    使用场景
    需要扩展一个类的功能或给一个类增加附加责任。
    需要动态地给一个对象增加功能，这些功能可以再动态地撤销。
    需要增加由一些基本功能的排列组合而产生的非常大量的功能

    适配器模式
    重点强调的是适配的功能。（适配器依赖抽象）
    最终的效果就是，主体类可以使用之前不相关的被适配类中的某些功能。*/
}
